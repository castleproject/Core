<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NLog.Extended</name>
    </assembly>
    <members>
        <member name="T:NLog.LayoutRenderers.AspNetApplicationValueLayoutRenderer">
            <summary>
            ASP.NET Application variable.
            </summary>
            <remarks>
            Use this layout renderer to insert the value of the specified variable stored 
            in the ASP.NET Application dictionary.
            </remarks>
            <example>
            <para>You can set the value of an ASP.NET Application variable by using the following code:</para>
            <code lang="C#">
            <![CDATA[
            HttpContext.Current.Application["myvariable"] = 123;
            HttpContext.Current.Application["stringvariable"] = "aaa BBB";
            HttpContext.Current.Application["anothervariable"] = DateTime.Now;
            ]]>
            </code>
            <para>Example usage of ${aspnet-application}:</para>
            <code lang="NLog Layout Renderer">
            ${aspnet-application:variable=myvariable} - produces "123"
            ${aspnet-application:variable=anothervariable} - produces "01/01/2006 00:00:00"
            ${aspnet-application:variable=anothervariable:culture=pl-PL} - produces "2006-01-01 00:00:00"
            ${aspnet-application:variable=myvariable:padding=5} - produces "  123"
            ${aspnet-application:variable=myvariable:padding=-5} - produces "123  "
            ${aspnet-application:variable=stringvariable:upperCase=true} - produces "AAA BBB"
            </code>
            </example>
        </member>
        <member name="M:NLog.LayoutRenderers.AspNetApplicationValueLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified ASP.NET Application variable and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.AspNetApplicationValueLayoutRenderer.Variable">
            <summary>
            Gets or sets the variable name.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="T:NLog.LayoutRenderers.AspNetRequestValueLayoutRenderer">
            <summary>
            ASP.NET Request variable.
            </summary>
            <remarks>
            Use this layout renderer to insert the value of the specified parameter of the
            ASP.NET Request object.
            </remarks>
            <example>
            <para>Example usage of ${aspnet-request}:</para>
            <code lang="NLog Layout Renderer">
            ${aspnet-request:item=v}
            ${aspnet-request:querystring=v}
            ${aspnet-request:form=v}
            ${aspnet-request:cookie=v}
            ${aspnet-request:serverVariable=v}
            </code>
            </example>
        </member>
        <member name="M:NLog.LayoutRenderers.AspNetRequestValueLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified ASP.NET Request variable and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.AspNetRequestValueLayoutRenderer.Item">
            <summary>
            Gets or sets the item name. The QueryString, Form, Cookies, or ServerVariables collection variables having the specified name are rendered.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.AspNetRequestValueLayoutRenderer.QueryString">
            <summary>
            Gets or sets the QueryString variable to be rendered.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.AspNetRequestValueLayoutRenderer.Form">
            <summary>
            Gets or sets the form variable to be rendered.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.AspNetRequestValueLayoutRenderer.Cookie">
            <summary>
            Gets or sets the cookie to be rendered.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.AspNetRequestValueLayoutRenderer.ServerVariable">
            <summary>
            Gets or sets the ServerVariables item to be rendered.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="T:NLog.LayoutRenderers.AspNetSessionIDLayoutRenderer">
            <summary>
            ASP.NET Session ID.
            </summary>                 
        </member>
        <member name="M:NLog.LayoutRenderers.AspNetSessionIDLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the ASP.NET Session ID appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.AspNetSessionValueLayoutRenderer">
            <summary>
            ASP.NET Session variable.
            </summary>
            <remarks>
            Use this layout renderer to insert the value of the specified variable stored 
            in the ASP.NET Session dictionary.
            </remarks>
            <example>
            <para>You can set the value of an ASP.NET Session variable by using the following code:</para>
            <code lang="C#">
            <![CDATA[
            HttpContext.Current.Session["myvariable"] = 123;
            HttpContext.Current.Session["stringvariable"] = "aaa BBB";
            HttpContext.Current.Session["anothervariable"] = DateTime.Now;
            ]]>
            </code>
            <para>Example usage of ${aspnet-session}:</para>
            <code lang="NLog Layout Renderer">
            ${aspnet-session:variable=myvariable} - produces "123"
            ${aspnet-session:variable=anothervariable} - produces "01/01/2006 00:00:00"
            ${aspnet-session:variable=anothervariable:culture=pl-PL} - produces "2006-01-01 00:00:00"
            ${aspnet-session:variable=myvariable:padding=5} - produces "  123"
            ${aspnet-session:variable=myvariable:padding=-5} - produces "123  "
            ${aspnet-session:variable=stringvariable:upperCase=true} - produces "AAA BBB"
            </code>
            </example>
        </member>
        <member name="M:NLog.LayoutRenderers.AspNetSessionValueLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified ASP.NET Session value and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.AspNetSessionValueLayoutRenderer.Variable">
            <summary>
            Gets or sets the session variable name.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="T:NLog.LayoutRenderers.AspNetUserAuthTypeLayoutRenderer">
            <summary>
            ASP.NET User variable.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.AspNetUserAuthTypeLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified ASP.NET User.Identity.AuthenticationType variable and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.AspNetUserIdentityLayoutRenderer">
            <summary>
            ASP.NET User variable.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.AspNetUserIdentityLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified ASP.NET User.Identity.Name variable and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.Targets.AspNetTraceTarget">
            <summary>
            Writes log messages to the ASP.NET trace.
            </summary>
            <seealso href="http://nlog-project.org/wiki/AspNetTrace_target">Documentation on NLog Wiki</seealso>
            <remarks>
            Log entries can then be viewed by navigating to http://server/path/Trace.axd.
            </remarks>
        </member>
        <member name="M:NLog.Targets.AspNetTraceTarget.Write(NLog.LogEventInfo)">
            <summary>
            Writes the specified logging event to the ASP.NET Trace facility. 
            If the log level is greater than or equal to <see cref="F:NLog.LogLevel.Warn"/> it uses the
            System.Web.TraceContext.Warn method, otherwise it uses
            System.Web.TraceContext.Write method.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="T:NLog.Targets.MessageQueueTarget">
            <summary>
            Writes log message to the specified message queue handled by MSMQ.
            </summary>
            <seealso href="http://nlog-project.org/wiki/MessageQueue_target">Documentation on NLog Wiki</seealso>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/MSMQ/Simple/NLog.config" />
            <p>
            You can use a single target to write to multiple queues (similar to writing to multiple files with the File target).
            </p>
            <code lang="XML" source="examples/targets/Configuration File/MSMQ/Multiple/NLog.config" />
            <p>
            The above examples assume just one target and a single rule. 
            More configuration options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/MSMQ/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.MessageQueueTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MessageQueueTarget"/> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="M:NLog.Targets.MessageQueueTarget.Write(NLog.LogEventInfo)">
            <summary>
            Writes the specified logging event to a queue specified in the Queue 
            parameter.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="M:NLog.Targets.MessageQueueTarget.PrepareMessage(NLog.LogEventInfo)">
            <summary>
            Prepares a message to be sent to the message queue.
            </summary>
            <param name="logEvent">The log event to be used when calculating label and text to be written.</param>
            <returns>The message to be sent.</returns>
            <remarks>
            You may override this method in inheriting classes
            to provide services like encryption or message 
            authentication.
            </remarks>
        </member>
        <member name="P:NLog.Targets.MessageQueueTarget.Queue">
            <summary>
            Gets or sets the name of the queue to write to.
            </summary>
            <remarks>
            To write to a private queue on a local machine use <c>.\private$\QueueName</c>.
            For other available queue names, consult MSMQ documentation.
            </remarks>
            <docgen category='Queue Options' order='10' />
        </member>
        <member name="P:NLog.Targets.MessageQueueTarget.Label">
            <summary>
            Gets or sets the label to associate with each message.
            </summary>
            <remarks>
            By default no label is associated.
            </remarks>
            <docgen category='Queue Options' order='10' />
        </member>
        <member name="P:NLog.Targets.MessageQueueTarget.CreateQueueIfNotExists">
            <summary>
            Gets or sets a value indicating whether to create the queue if it doesn't exists.
            </summary>
            <docgen category='Queue Options' order='10' />
        </member>
        <member name="P:NLog.Targets.MessageQueueTarget.Recoverable">
            <summary>
            Gets or sets a value indicating whether to use recoverable messages (with guaranteed delivery).
            </summary>
            <docgen category='Queue Options' order='10' />
        </member>
        <member name="P:NLog.Targets.MessageQueueTarget.Encoding">
            <summary>
            Gets or sets the encoding to be used when writing text to the queue.
            </summary>
            <docgen category='Layout Options' order='10' />
        </member>
        <member name="P:NLog.Targets.MessageQueueTarget.UseXmlEncoding">
            <summary>
            Gets or sets a value indicating whether to use the XML format when serializing message.
            </summary>
            <docgen category='Layout Options' order='10' />
        </member>
        <member name="T:NLog.Targets.Wrappers.AspNetBufferingTargetWrapper">
            <summary>
            Buffers log events for the duration of ASP.NET request and sends them down 
            to the wrapped target at the end of a request.
            </summary>
            <seealso href="http://nlog-project.org/wiki/AspNetBufferingWrapper_target">Documentation on NLog Wiki</seealso>
            <remarks>
            <p>
            Typically this target is used in cooperation with PostFilteringTargetWrapper
            to provide verbose logging for failing requests and normal or no logging for
            successful requests. We need to make the decision of the final filtering rule
            to apply after all logs for a page have been generated.
            </p>
            <p>
            To use this target, you need to add an entry in the httpModules section of
            web.config:
            </p>
            <code lang="XML">
            <![CDATA[<?xml version="1.0" ?>
            <configuration>
              <system.web>
                <httpModules>
                  <add name="NLog" type="NLog.Web.NLogHttpModule, NLog"/>
                </httpModules>
              </system.web>
            </configuration>
            ]]>
            </code>
            </remarks>
            <example>
            <p>To set up the ASP.NET Buffering target wrapper <a href="config.html">configuration file</a>, put
            the following in <c>web.nlog</c> file in your web application directory (this assumes
            that PostFilteringWrapper is used to provide the filtering and actual logs go to
            a file).
            </p>
            <code lang="XML" source="examples/targets/Configuration File/ASPNetBufferingWrapper/web.nlog" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To configure the target programmatically, put the following
            piece of code in your <c>Application_OnStart()</c> handler in Global.asax.cs 
            or some other place that gets executed at the very beginning of your code:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/ASPNetBufferingWrapper/Global.asax.cs" />
            <p>
            Fully working C# project can be found in the <c>Examples/Targets/Configuration API/ASPNetBufferingWrapper</c>
            directory along with usage instructions.
            </p>
            </example>
        </member>
        <member name="M:NLog.Targets.Wrappers.AspNetBufferingTargetWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.AspNetBufferingTargetWrapper"/> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.AspNetBufferingTargetWrapper.#ctor(NLog.Targets.Target)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.AspNetBufferingTargetWrapper"/> class.
            </summary>
            <param name="wrappedTarget">The wrapped target.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.AspNetBufferingTargetWrapper.#ctor(NLog.Targets.Target,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.AspNetBufferingTargetWrapper"/> class.
            </summary>
            <param name="wrappedTarget">The wrapped target.</param>
            <param name="bufferSize">Size of the buffer.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.AspNetBufferingTargetWrapper.InitializeTarget">
            <summary>
            Initializes the target by hooking up the NLogHttpModule BeginRequest and EndRequest events.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.AspNetBufferingTargetWrapper.CloseTarget">
            <summary>
            Closes the target by flushing pending events in the buffer (if any).
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.AspNetBufferingTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Adds the specified log event to the buffer.
            </summary>
            <param name="logEvent">The log event.</param>
        </member>
        <member name="P:NLog.Targets.Wrappers.AspNetBufferingTargetWrapper.BufferSize">
            <summary>
            Gets or sets the number of log events to be buffered.
            </summary>
            <docgen category='Buffering Options' order='100' />
        </member>
        <member name="P:NLog.Targets.Wrappers.AspNetBufferingTargetWrapper.GrowBufferAsNeeded">
            <summary>
            Gets or sets a value indicating whether buffer should grow as needed.
            </summary>
            <value>A value of <c>true</c> if buffer should grow as needed; otherwise, <c>false</c>.</value>
            <remarks>
            Value of <c>true</c> causes the buffer to expand until <see cref="P:NLog.Targets.Wrappers.AspNetBufferingTargetWrapper.BufferGrowLimit"/> is hit,
            <c>false</c> causes the buffer to never expand and lose the earliest entries in case of overflow.
            </remarks>
            <docgen category="Buffering Options" order="100"/>
        </member>
        <member name="P:NLog.Targets.Wrappers.AspNetBufferingTargetWrapper.BufferGrowLimit">
            <summary>
            Gets or sets the maximum number of log events that the buffer can keep.
            </summary>
            <docgen category='Buffering Options' order='100' />
        </member>
        <member name="T:NLog.Web.NLogHttpModule">
            <summary>
            ASP.NET HttpModule that enables NLog to hook BeginRequest and EndRequest events easily.
            </summary>
        </member>
        <member name="M:NLog.Web.NLogHttpModule.Init(System.Web.HttpApplication)">
            <summary>
            Initializes the HttpModule.
            </summary>
            <param name="application">
            ASP.NET application.
            </param>
        </member>
        <member name="M:NLog.Web.NLogHttpModule.Dispose">
            <summary>
            Disposes the module.
            </summary>
        </member>
        <member name="E:NLog.Web.NLogHttpModule.EndRequest">
            <summary>
            Event to be raised at the end of each HTTP Request.
            </summary>
        </member>
        <member name="E:NLog.Web.NLogHttpModule.BeginRequest">
            <summary>
            Event to be raised at the beginning of each HTTP Request.
            </summary>
        </member>
    </members>
</doc>
